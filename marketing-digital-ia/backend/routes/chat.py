from fastapi import APIRouter, Depends, HTTPException
import logging
from pydantic import BaseModel
from services.openai_service import gerar_resposta
from services.embedding_service import buscar_contexto
from security import verificar_autenticacao

# CORRIGIDO: Removido prefix="/chat" daqui. Ele j√° √© adicionado em main.py
router = APIRouter(tags=["Chat"]) 

class ChatInput(BaseModel):
    mensagem: str
    id_assistant: str = None

@router.post("/")
async def conversar(
    input: ChatInput,
    # Inclui "admin" para que usu√°rios administradores tamb√©m possam utilizar o chat
    usuario=Depends(verificar_autenticacao(["Diretoria", "Marketing", "Comercial", "Log√≠stica", "admin"]))
):
    if not input.id_assistant:
        raise HTTPException(status_code=400, detail="ID do assistente √© obrigat√≥rio.")

    # üîé Buscar contexto relevante da base de conhecimento
    contexto = buscar_contexto(input.mensagem)
    print("üìö Contexto carregado:\n", contexto)

    # üß≠ Prompt com tom mais s√≥brio, direto e institucional
    prompt_com_contexto = f"""
Voc√™ √© a Sara, assistente institucional da Radha Ambientes Planejados.

Sua fun√ß√£o √© fornecer respostas claras, objetivas e confi√°veis com base nas informa√ß√µes dispon√≠veis. Evite qualquer linguagem promocional, chamadas para a√ß√£o, hashtags ou links.

Este atendimento est√° sendo feito para: {usuario['nome']} ({usuario['cargo']})

Comunique-se de forma s√≥bria e acolhedora. Ajude tanto clientes quanto colaboradores a compreender os processos, diferenciais e diretrizes da Radha.

Informa√ß√µes dispon√≠veis:
{contexto}

Pergunta: {input.mensagem}
"""
    try:
        resposta = await gerar_resposta(prompt_com_contexto, input.id_assistant)
    except Exception:
        logging.exception("Erro ao gerar resposta")
        raise HTTPException(status_code=500, detail="Falha ao processar a mensagem")
    return {"resposta": resposta}
