*** Begin Patch
*** Update File: agente_erp_rag.py
@@
$(sed -n '168,309p' agente_erp_rag.py | sed 's/^/-/')
+# --- PONTO DE ENTRADA: indexa√ß√£o din√¢mica via ripgrep e prompt inicial ---
+if __name__ == "__main__":
+    # Primeiro passo: recebe a solicita√ß√£o em linguagem natural
+    print("\n‚úÖ Agente ERP RAG iniciado. Digite sua solicita√ß√£o em linguagem natural (ou 'sair' para encerrar):")
+    solicitacao = input("> ").strip()
+    if not solicitacao or solicitacao.lower() in ['sair', 'exit', 'quit']:
+        print("Encerrando o agente. At√© logo!")
+        exit(0)
+
+    # Localiza arquivos relevantes via ripgrep, ignorando diret√≥rios comuns
+    project_root = os.getcwd()
+    print("\nüîç Encontrando arquivos relevantes com ripgrep...")
+    try:
+        rg_proc = subprocess.run(
+            [
+                "rg", "-l", solicitacao,
+                "--glob", "!.git/*",
+                "--glob", "!venv/*",
+                "--glob", "!.vscode/*",
+                "--glob", "!.idea/*"
+            ],
+            cwd=project_root,
+            capture_output=True,
+            text=True,
+        )
+        arquivos = [os.path.join(project_root, p) for p in rg_proc.stdout.splitlines() if p.strip()]
+    except Exception as e:
+        print(f"Erro ao executar ripgrep: {e}")
+        arquivos = []
+
+    if arquivos:
+        print(f"Arquivos encontrados pelo ripgrep: {len(arquivos)}")
+    else:
+        print("Nenhum arquivo espec√≠fico encontrado. Iremos indexar todo o projeto.")
+        arquivos = [project_root]
+
+    # Cria o agente indexando apenas os arquivos relevantes
+    print(f"\nIniciando indexa√ß√£o para {len(arquivos)} arquivos... (isso pode levar alguns instantes)")
+    agente = AgenteERP_RAG_Focado(escopos_de_codigo=arquivos)
+
+    # Gera e exibe o plano de a√ß√£o
+    print("\n‚úÖ Indexa√ß√£o conclu√≠da. Gerando plano de a√ß√£o...\n")
+    plano_completo = agente.gerar_plano(solicitacao)
+
+    if plano_completo and "erro" not in plano_completo:
+        print("\n" + "="*28 + " PLANO DE A√á√ÉO (JSON) " + "="*29)
+        print(json.dumps(plano_completo.get("plano_execucao_json", {}), indent=2, ensure_ascii=False))
+        print("="*80)
+
+    print("\nPr√≥xima solicita√ß√£o ou 'sair' para terminar.")
*** End Patch
